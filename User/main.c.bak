/* Includes ------------------------------------------------------------------*/
#include "USART.h"
#include "main.h"
#include "LED_Con.h"
#include "USART_Data.h"
#include "stm32f4xx_wwdg.h"

extern uint8_t aTxBuffer[];
extern uint8_t aRxBuffer[];
extern unsigned char Rx_Compli_Flag;
extern unsigned char Rx_Count;
extern unsigned char Tx_Count;
extern unsigned char Tx_Count_485;
extern uint8_t aRxBuffer [BUFFERSIZE];
extern unsigned char Tx_Flag;
extern unsigned char Tx_Flag_485;


static __IO uint32_t TimingDelay;

void main(void)
{
  uint16_t tmp=0;
    
  SYsInit();

  /* Check if the system has resumed from WWDG reset */
  if (RCC_GetFlagStatus(RCC_FLAG_WWDGRST) != RESET)
  { 
    /* WWDGRST flag set */
    /* Turn off LED3 */
    GPIO_SetBits(GPIOA, LED3_PIN);

    /* Clear reset flags */
    RCC_ClearFlag();
  }
  else
  {
    /* WWDGRST flag is not set */
    /* Turn off LED3 */
    GPIO_ResetBits(GPIOA, LED3_PIN);
  }

  /* WWDG configuration */
  /* Enable WWDG clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);

  /* WWDG clock counter = (PCLK1 (42MHz)/4096)/8 = 1281 Hz (~780 us)  */
  WWDG_SetPrescaler(WWDG_Prescaler_1);

  /* Set Window value to 80; WWDG counter should be refreshed only when the counter
    is below 80 (and greater than 64) otherwise a reset will be generated */
  WWDG_SetWindowValue(80);

  /* Enable WWDG and set counter value to 127, WWDG timeout = ~780 us * 64 = 49.92 ms 
     In this case the refresh window is: 
           ~780 * (127-80) = 36.6ms < refresh window < ~780 * 64 = 49.9ms
  */
  //WWDG_Enable(120);
  
  while(1)
  {
    WWDG_SetCounter(127);
    
    //////////// LED Toggle for System Check /////////////////////
    tmp++;
    if(tmp%100000==0)
    {
       GPIO_ToggleBits(GPIOA, LED4_PIN);
    }
    /////////////////////////////////////////////////////////////


    
    //////////// DUST Sensor Data Read & 485 Tx//////////////////
    SensorDataProcess();
    /////////////////////////////////////////////////////////////
  }
}

void SYsInit(void)
{
  LED_On_Test();
  USART6_Config();
  USART2_Config();
  SysTickConfig();  
}
  

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif
